<!DOCTYPE html>
<html lang="en" >
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>üöÄ Ultimate Class Bunk Calculator</title>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;700&display=swap');

    /* Reset */
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: 'Poppins', sans-serif;
    }

    body {
      background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
      min-height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
      padding: 20px;
      transition: background 0.5s ease;
      overflow-x: hidden;
    }
    body.dark {
      background: linear-gradient(135deg, #0f2027 0%, #203a43 50%, #2c5364 100%);
      color: #eee;
    }

    .container {
      background: white;
      border-radius: 20px;
      max-width: 450px;
      width: 100%;
      padding: 35px 40px 50px;
      box-shadow: 0 30px 60px rgba(0,0,0,0.12);
      position: relative;
      overflow: hidden;
      transition: background-color 0.5s ease, color 0.5s ease;
    }
    body.dark .container {
      background: #1c293a;
      color: #eee;
      box-shadow: 0 30px 60px rgba(0,0,0,0.7);
    }

    h1 {
      font-size: 2rem;
      margin-bottom: 25px;
      color: #0077ff;
      text-align: center;
      text-shadow: 0 2px 5px rgba(0, 119, 255, 0.7);
      user-select: none;
    }
    body.dark h1 {
      color: #65aaff;
      text-shadow: 0 2px 8px rgba(101, 170, 255, 0.9);
    }

    label {
      font-weight: 600;
      margin-top: 20px;
      display: block;
      color: #333;
    }
    body.dark label {
      color: #ccc;
    }

    input[type="number"] {
      width: 100%;
      padding: 12px 15px;
      font-size: 1rem;
      border-radius: 12px;
      border: 1.8px solid #ddd;
      margin-top: 8px;
      transition: border-color 0.3s ease, background-color 0.3s ease, color 0.3s ease;
      user-select: text;
    }
    input[type="number"]:focus {
      border-color: #0077ff;
      outline: none;
      background-color: #eaf4ff;
      color: #111;
    }
    body.dark input[type="number"] {
      background-color: #2c3e59;
      border-color: #4a75ff;
      color: #eee;
    }
    body.dark input[type="number"]:focus {
      background-color: #3a4e74;
      color: #fff;
    }

    button {
      margin-top: 30px;
      width: 100%;
      background: #0077ff;
      color: white;
      font-size: 1.15rem;
      font-weight: 700;
      padding: 15px 0;
      border: none;
      border-radius: 14px;
      cursor: pointer;
      box-shadow: 0 8px 15px rgba(0, 119, 255, 0.4);
      transition: background-color 0.3s ease, box-shadow 0.3s ease;
      user-select: none;
    }
    button:hover {
      background: #005fcc;
      box-shadow: 0 10px 20px rgba(0, 95, 204, 0.7);
    }

    #result {
      margin-top: 30px;
      font-weight: 700;
      font-size: 1.3rem;
      min-height: 70px;
      color: #005fcc;
      user-select: text;
      transition: color 0.3s ease;
    }
    body.dark #result {
      color: #8cc1ff;
    }

    #funnyLine {
      font-style: italic;
      margin-top: 12px;
      font-weight: 700;
      color: #ff6600;
      animation: pulse 2.5s infinite;
      user-select: none;
    }
    body.dark #funnyLine {
      color: #ffaa33;
      animation: pulseDark 2.5s infinite;
    }

    @keyframes pulse {
      0%, 100% { color: #ff6600; }
      50% { color: #ff3300; }
    }
    @keyframes pulseDark {
      0%, 100% { color: #ffaa33; }
      50% { color: #ffaa00; }
    }

    footer {
      margin-top: 30px;
      font-size: 0.8rem;
      color: #555;
      text-align: center;
      user-select: none;
    }
    body.dark footer {
      color: #999;
    }

    /* Progress bar container */
    .progress-container {
      background-color: #eee;
      border-radius: 25px;
      height: 22px;
      margin-top: 30px;
      overflow: hidden;
      box-shadow: inset 0 2px 6px rgba(0,0,0,0.1);
      user-select: none;
    }
    body.dark .progress-container {
      background-color: #32475a;
      box-shadow: inset 0 2px 6px rgba(255,255,255,0.15);
    }

    /* Progress bar fill */
    .progress-bar {
      height: 100%;
      width: 0;
      background: linear-gradient(90deg, #0077ff, #00d4ff);
      border-radius: 25px;
      transition: width 1.2s ease;
      box-shadow: 0 0 10px rgba(0, 119, 255, 0.7);
    }

    body.dark .progress-bar {
      background: linear-gradient(90deg, #65aaff, #33dfff);
      box-shadow: 0 0 15px rgba(101, 170, 255, 0.9);
    }

    /* Dark mode toggle */
    .toggle-container {
      position: absolute;
      top: 20px;
      right: 20px;
      user-select: none;
    }
    .toggle-label {
      display: flex;
      align-items: center;
      cursor: pointer;
      font-weight: 600;
      color: #0077ff;
    }
    body.dark .toggle-label {
      color: #8cc1ff;
    }
    .toggle-label input {
      margin-right: 8px;
      cursor: pointer;
    }

    /* Confetti styles */
    .confetti {
      position: fixed;
      pointer-events: none;
      z-index: 9999;
      width: 10px;
      height: 10px;
      background-color: #ffdd57;
      opacity: 0.9;
      border-radius: 3px;
      animation: confettiFall 3s linear forwards;
    }
    @keyframes confettiFall {
      0% {
        transform: translateY(0) rotate(0deg);
        opacity: 0.9;
      }
      100% {
        transform: translateY(100vh) rotate(720deg);
        opacity: 0;
      }
    }

  </style>
</head>
<body>

  <div class="container">
    <div class="toggle-container">
      <label class="toggle-label">
        <input type="checkbox" id="darkModeToggle" />
        Dark Mode
      </label>
    </div>

    <h1>üìö Class Bunk Calculator üöÄ</h1>

    <label for="totalClasses">Total Classes Held:</label>
    <input type="number" id="totalClasses" min="0" placeholder="Enter total classes held" />

    <label for="attendedClasses">Classes Attended:</label>
    <input type="number" id="attendedClasses" min="0" placeholder="Enter classes attended" />

    <label for="minAttendance">Minimum Attendance % Required:</label>
    <input type="number" id="minAttendance" min="1" max="100" placeholder="e.g. 75" value="75" />

    <button id="calculateBtn">Calculate Bunkable Classes</button>

    <div class="progress-container" aria-label="Attendance Progress Bar">
      <div class="progress-bar" id="progressBar"></div>
    </div>

    <div id="result"></div>
    <div id="funnyLine"></div>

    <footer>Made with ‚ù§Ô∏è by your study buddy</footer>
  </div>

  <script>
    // Elements
    const totalClassesInput = document.getElementById('totalClasses');
    const attendedClassesInput = document.getElementById('attendedClasses');
    const minAttendanceInput = document.getElementById('minAttendance');
    const resultDiv = document.getElementById('result');
    const funnyDiv = document.getElementById('funnyLine');
    const progressBar = document.getElementById('progressBar');
    const calculateBtn = document.getElementById('calculateBtn');
    const darkModeToggle = document.getElementById('darkModeToggle');

    // Funny quotes cycling
    const funnyQuotes = [
      "Bunk smart, not hard! üòé",
      "Eh! Play safe or face the attendance police! üöì",
      "Better start attending or prepare for a sad report card. üò¢",
      "You‚Äôre almost there! Keep up the good work! üí™",
      "Attendance = Future Success. Don‚Äôt mess it up! üìö",
      "Are you a magician? Because you keep making classes disappear! üé©‚ú®",
      "Just a few classes more ‚Äî you got this! üöÄ",
      "Confetti ready if you keep that attendance high! üéâ",
      "Don't let attendance be your nightmare! üò±",
      "Bunk a little, learn a lot! (Maybe...) ü§î"
    ];

    let funnyIndex = 0;

    // Update funny line every 4 seconds
    function cycleFunnyQuotes() {
      funnyDiv.textContent = funnyQuotes[funnyIndex];
      funnyIndex = (funnyIndex + 1) % funnyQuotes.length;
    }
    setInterval(cycleFunnyQuotes, 4000);
    cycleFunnyQuotes(); // Initial call

    // Dark mode toggle
    darkModeToggle.addEventListener('change', () => {
      document.body.classList.toggle('dark', darkModeToggle.checked);
    });

    // Confetti effect
    function createConfetti() {
      const confettiCount = 50;
      for(let i = 0; i < confettiCount; i++) {
        const confetti = document.createElement('div');
        confetti.classList.add('confetti');
        confetti.style.left = Math.random() * window.innerWidth + 'px';
        confetti.style.backgroundColor = `hsl(${Math.random() * 360}, 70%, 60%)`;
        confetti.style.animationDuration = (2 + Math.random() * 2) + 's';
        confetti.style.opacity = Math.random() + 0.5;
        document.body.appendChild(confetti);

        // Remove after animation
        confetti.addEventListener('animationend', () => {
          confetti.remove();
        });
      }
    }

    // Main calculate function
    function calculate() {
      const total = parseInt(totalClassesInput.value);
      const attended = parseInt(attendedClassesInput.value);
      const minPercent = parseInt(minAttendanceInput.value);

      if (isNaN(total) || isNaN(attended) || isNaN(minPercent)) {
        resultDiv.textContent = "Please fill all fields with valid numbers!";
        funnyDiv.textContent = "";
        progressBar.style.width = '0';
        return;
      }
      if (total < attended) {
        resultDiv.textContent = "You can't attend more classes than total held!";
        funnyDiv.textContent = "Time machine isn't invented yet, sadly.";
        progressBar.style.width = '0';
        return;
      }
      if (minPercent < 1 || minPercent > 100) {
        resultDiv.textContent = "Minimum attendance should be between 1 and 100!";
        funnyDiv.textContent = "Come on, don't be lazy with rules!";
        progressBar.style.width = '0';
        return;
      }

      const currentPercent = total === 0 ? 0 : (attended / total) * 100;

      // Calculate bunkable classes without falling below min attendance
      let bunkable = Math.floor((attended / (minPercent / 100)) - total);
      bunkable = bunkable < 0 ? 0 : bunkable;

      // Calculate how many classes to attend to reach min attendance if below
      let needed = 0;
      if (currentPercent < minPercent) {
        needed = Math.ceil(((minPercent / 100) * total - attended) / (1 - minPercent / 100));
      }

      // Update progress bar with animation
      progressBar.style.width = `${Math.min(currentPercent, 100)}%`;

      // Results and funny messages
      let message = "";
      let funnyMsg = "";

      if (currentPercent >= minPercent) {
        message = `üéâ You can bunk <strong>${bunkable}</strong> more class${bunkable !== 1 ? 'es' : ''} and still keep your attendance at ${minPercent}%. Your current attendance is <strong>${currentPercent.toFixed(2)}%</strong>.`;
        if (bunkable === 0) funnyMsg = "Eh! Play safe or face the attendance police! üöì";
        else funnyMsg = "Bunk smart, not hard! üòé";
        createConfetti();
      } else {
        message = `‚ö†Ô∏è You need to attend next <strong>${needed}</strong> class${needed !== 1 ? 'es' : ''} to reach the minimum attendance of ${minPercent}%. Your current attendance is <strong>${currentPercent.toFixed(2)}%</strong>.`;
        funnyMsg = "Better start attending or prepare for a sad report card. üò¢";
      }

      resultDiv.innerHTML = message;
      funnyDiv.textContent = funnyMsg;
    }

    calculateBtn.addEventListener('click', calculate);

    // Optional: calculate automatically when inputs change after a delay
    let typingTimer;
    const typingDelay = 700;

    [totalClassesInput, attendedClassesInput, minAttendanceInput].forEach(input => {
      input.addEventListener('input', () => {
        clearTimeout(typingTimer);
        typingTimer = setTimeout(calculate, typingDelay);
      });
    });

  </script>

</body>
</html>
